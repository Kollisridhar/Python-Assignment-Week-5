# -*- coding: utf-8 -*-
"""Copy of Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17AR4NRfdYQstICX7E3V2qr6sSjDmE-wp
"""

# Part A – Python Basics
numbers = [10, 25, 7, 33, 5, 60]
max_num = max(numbers)
min_num = min(numbers)
sum_num = sum(numbers)
avg_num = sum_num / len(numbers) if len(numbers) > 0 else 0

sentence = "This is a test sentence and this test is simple and short"
words = sentence.lower().split()
word_freq = {}
for word in words:
    word_freq[word] = word_freq.get(word, 0) + 1


def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
prime_checks = [is_prime(x) for x in [1, 2, 3, 4, 5, 17, 20]]
print(f"Max: {max_num}, Min: {min_num}, Sum: {sum_num}, Average: {avg_num}")
print("Word frequencies:", word_freq)
print("Prime check results:", prime_checks)

#Part C – Data Manipulation (Python + Pandas)
import pandas as pd
import numpy as np

data = {
    'SaleID': range(1, 11),
    'CustomerID': [101, 102, 103, 101, 105, 106, 107, 102, 108, 109],
    'Product': ['A', 'B', 'A', 'C', 'B', 'A', 'C', 'C', 'B', 'A'],
    'Quantity': [2, 5, 1, 7, 3, 2, 6, 2, 1, 4],
    'Price': [10.0, 15.0, 10.0, 20.0, 15.0, 10.0, 20.0, 20.0, 15.0, 10.0],
    'SaleDate': pd.to_datetime([
        '2024-01-10', '2024-02-15', '2024-01-25', '2024-03-10', '2024-02-20',
        '2024-01-30', '2024-03-15', '2024-03-20', '2024-02-28', '2024-01-12'
    ])
}

df = pd.DataFrame(data)

df_clean = df.dropna()

df_clean['TotalAmount'] = df_clean['Quantity'] * df_clean['Price']

total_revenue_by_product = df_clean.groupby('Product')['TotalAmount'].sum().reset_index()

df_clean['YearMonth'] = df_clean['SaleDate'].dt.to_period('M')
monthly_sales = df_clean.groupby('YearMonth')['TotalAmount'].sum()
max_sales_month = monthly_sales.idxmax()
max_sales_value = monthly_sales.max()

print("Total revenue per product:")
print(total_revenue_by_product)

print(f"\nMonth with highest sales: {max_sales_month} with total sales of {max_sales_value}")

#Part D – Visualization (Matplotlib)

import pandas as pd
import matplotlib.pyplot as plt

data = {
    'SaleID': range(1, 11),
    'CustomerID': [101, 102, 103, 101, 105, 106, 107, 102, 108, 109],
    'Product': ['A', 'B', 'A', 'C', 'B', 'A', 'C', 'C', 'B', 'A'],
    'Quantity': [2, 5, 1, 7, 3, 2, 6, 2, 1, 4],
    'Price': [10.0, 15.0, 10.0, 20.0, 15.0, 10.0, 20.0, 20.0, 15.0, 10.0],
    'SaleDate': pd.to_datetime([
        '2024-01-10', '2024-02-15', '2024-01-25', '2024-03-10', '2024-02-20',
        '2024-01-30', '2024-03-15', '2024-03-20', '2024-02-28', '2024-01-12'
    ])
}

df = pd.DataFrame(data)
df['TotalAmount'] = df['Quantity'] * df['Price']
total_revenue = df.groupby('Product')['TotalAmount'].sum().reset_index()
df['YearMonth'] = df['SaleDate'].dt.to_period('M')
monthly_sales = df.groupby('YearMonth')['TotalAmount'].sum()
product_sales = df.groupby('Product')['TotalAmount'].sum()
quantity_vs_total = df[['Quantity','TotalAmount']]

plt.figure(figsize=(10,6))
plt.bar(total_revenue['Product'], total_revenue['TotalAmount'], color='skyblue')
plt.title('Total Revenue per Product')
plt.xlabel('Product')
plt.ylabel('Total Revenue')
plt.show()

plt.figure(figsize=(10,6))
plt.plot(monthly_sales.index.astype(str), monthly_sales.values, marker='o', linestyle='-', color='green')
plt.title('Monthly Sales Trends')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.grid()
plt.show()

plt.figure(figsize=(8,8))
plt.pie(product_sales, labels=product_sales.index, autopct='%1.1f%%', startangle=140)
plt.title('Percentage Contribution of Each Product to Total Sales')
plt.axis('equal')
plt.show()

plt.figure(figsize=(10,6))
plt.scatter(quantity_vs_total['Quantity'], quantity_vs_total['TotalAmount'], color='red')
plt.title('Quantity vs TotalAmount')
plt.xlabel('Quantity')
plt.ylabel('Total Amount')
plt.grid()
plt.show()